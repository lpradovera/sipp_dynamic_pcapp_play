diff -rupN sipp_old/src/actions.cpp sipp_new/src/actions.cpp
--- sipp_old/src/actions.cpp	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/src/actions.cpp	2014-11-13 12:02:24.898078249 +0000
@@ -147,7 +147,7 @@ void CAction::afficheInfo()
     } else if (M_action == E_AT_VAR_TO_DOUBLE) {
         printf("Type[%d] - toDouble varId[%s]", M_action, display_scenario->allocVars->getName(M_varId));
 #ifdef PCAPPLAY
-    } else if ((M_action == E_AT_PLAY_PCAP_AUDIO) || (M_action == E_AT_PLAY_PCAP_VIDEO)) {
+    } else if ((M_action == E_AT_PLAY_PCAP_AUDIO) || (M_action == E_AT_PLAY_DYN_PCAP_AUDIO) || (M_action == E_AT_PLAY_PCAP_VIDEO)) {
         printf("Type[%d] - file[%s]", M_action, M_pcapArgs->file);
 #endif
 
diff -rupN sipp_old/include/actions.hpp sipp_new/include/actions.hpp
--- sipp_old/include/actions.hpp	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/include/actions.hpp	2014-11-13 12:02:49.366304919 +0000
@@ -70,6 +70,7 @@ public:
         E_AT_SET_DEST,
         E_AT_CLOSE_CON,
 #ifdef PCAPPLAY
+        E_AT_PLAY_DYN_PCAP_AUDIO,
         E_AT_PLAY_PCAP_AUDIO,
         E_AT_PLAY_PCAP_VIDEO,
 #endif
diff -rupN sipp_old/src/call.cpp sipp_new/src/call.cpp
--- sipp_old/src/call.cpp	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/src/call.cpp	2014-11-13 12:02:24.898078249 +0000
@@ -3800,10 +3800,21 @@ call::T_ActionResult call::executeAction
             }
 #ifdef PCAPPLAY
         } else if ((currentAction->getActionType() == CAction::E_AT_PLAY_PCAP_AUDIO) ||
+                   (currentAction->getActionType() == CAction::E_AT_PLAY_DYN_PCAP_AUDIO) ||
                    (currentAction->getActionType() == CAction::E_AT_PLAY_PCAP_VIDEO)) {
             play_args_t *play_args = 0;
             if (currentAction->getActionType() == CAction::E_AT_PLAY_PCAP_AUDIO) {
                 play_args = &(this->play_args_a);
+
+                // Play PCAP in static mode
+               (currentAction->getPcapPkts())->dynamic_play = 0;
+
+           } else if (currentAction->getActionType() == CAction::E_AT_PLAY_DYN_PCAP_AUDIO) {
+               play_args = &(this->play_args_a);
+
+               // Play PCAP in dynamic mode
+               (currentAction->getPcapPkts())->dynamic_play = 1;
+
             } else if (currentAction->getActionType() == CAction::E_AT_PLAY_PCAP_VIDEO) {
                 play_args = &(this->play_args_v);
             }
diff -rupN sipp_old/include/prepare_pcap.h sipp_new/include/prepare_pcap.h
--- sipp_old/include/prepare_pcap.h	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/include/prepare_pcap.h	2014-11-13 12:02:49.370306919 +0000
@@ -56,6 +56,8 @@ typedef struct {
     int partial_check;
 } pcap_pkt;
 
+#define PCAP_TIMESTAMP_SHIFT 1000
+#define PCAP_SEQ_NUM_SHIFT 1000
 #define PCAP_MAXPACKET	1500
 typedef struct {
     char *file;
@@ -63,6 +65,16 @@ typedef struct {
     u_long max_length;
     pcap_pkt *max;
     pcap_pkt *pkts;
+
+    /* 
+     * Indicates if the RTP packets must be sent with changed sequence numbers 
+     * (dynamic play), rather than the original ones (static play). 
+     * 
+     * The dynamic play mode allow the SIPP to play the same PCAP file more than
+     * once, because each time the file is played, different sequence numbers are
+     * used.
+     */
+    short int dynamic_play;
 } pcap_pkts;
 
 #ifdef __cplusplus
diff -rupN sipp_old/src/scenario.cpp sipp_new/src/scenario.cpp
--- sipp_old/src/scenario.cpp	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/src/scenario.cpp	2014-11-13 12:02:24.898078249 +0000
@@ -1612,6 +1612,10 @@ void scenario::parseAction(CActions *act
                 tmpAction->setPcapArgs(ptr);
                 tmpAction->setActionType(CAction::E_AT_PLAY_PCAP_AUDIO);
                 hasMedia = 1;
+            } else if ((ptr = xp_get_value((char *) "play_dyn_pcap_audio"))) {
+                tmpAction->setPcapArgs(ptr);
+                tmpAction->setActionType(CAction::E_AT_PLAY_DYN_PCAP_AUDIO);
+                hasMedia = 1;
             } else if ((ptr = xp_get_value((char *) "play_pcap_video"))) {
                 tmpAction->setPcapArgs(ptr);
                 tmpAction->setActionType(CAction::E_AT_PLAY_PCAP_VIDEO);
diff -rupN sipp_old/src/send_packets.c sipp_new/src/send_packets.c
--- sipp_old/src/send_packets.c	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/src/send_packets.c	2014-11-13 12:10:47.185068966 +0000
@@ -60,6 +60,8 @@
 #include "prepare_pcap.h"
 #include "screen.hpp"
 
+extern volatile unsigned long pcap_data_played;
+extern volatile unsigned long pcap_timestamp_shift;
 extern volatile unsigned long rtp_pckts_pcap;
 extern volatile unsigned long rtp_bytes_pcap;
 extern int media_ip_is_ipv6;
@@ -126,6 +128,7 @@ int send_packets (play_args_t * play_arg
 {
     int ret, sock, port_diff;
     pcap_pkt *pkt_index, *pkt_max;
+    short int dynamic_play;
     uint16_t *from_port, *to_port;
     struct timeval didsleep = { 0, 0 };
     struct timeval start = { 0, 0 };
@@ -178,6 +181,7 @@ int send_packets (play_args_t * play_arg
 
     pkt_index = pkts->pkts;
     pkt_max = pkts->max;
+    dynamic_play = pkts->dynamic_play;
 
     if (media_ip_is_ipv6) {
         memset(&to6, 0, sizeof(to6));
@@ -194,11 +198,70 @@ int send_packets (play_args_t * play_arg
      */
     pthread_cleanup_push(send_packets_cleanup, ((void *) &sock));
 
+    unsigned char last_pcap_seq_num[2] = {0, 0};
+    unsigned short int pcap_seq_num_diff = 0;
+    int tstamp = 0;                                                                                                     
+    unsigned short int pcap_total_duration = 0;
+    if (dynamic_play) {
+        // Calculate the timestamp to be used in the current PCAP file
+        tstamp = pcap_timestamp_shift + PCAP_TIMESTAMP_SHIFT; 
+    }
 
     while (pkt_index < pkt_max) {
         memcpy(udp, pkt_index->data, pkt_index->pktlen);
-        port_diff = ntohs (udp->uh_dport) - pkts->base;
+
+        if (dynamic_play) {
+
+          // Retrieve the original sequence number (hexadecimal) from the PCAP data
+          unsigned char seq_num_hex[2];
+          seq_num_hex[0] = (unsigned char) buffer[10];
+          seq_num_hex[1] = (unsigned char) buffer[11];
+
+          // Retrieve the original timestamp (hexadecimal) from the PCAP data
+          unsigned char timestamp_hex[4];
+          timestamp_hex[0] = (unsigned char) buffer[12];
+          timestamp_hex[1] = (unsigned char) buffer[13];
+          timestamp_hex[2] = (unsigned char) buffer[14];
+          timestamp_hex[3] = (unsigned char) buffer[15];
+
+          // Check if the sequence number has changed
+          if (last_pcap_seq_num[0] != seq_num_hex[0] ||
+              last_pcap_seq_num[1] != seq_num_hex[1]) {
+
+            // Get the duration of the current packet
+            unsigned short int duration = 0;
+            duration = (unsigned char) buffer[22];
+            duration = duration << 8;
+            duration = duration  | (unsigned char) buffer[23];
+            pcap_total_duration += duration;
+
+            last_pcap_seq_num[0] = seq_num_hex[0];
+            last_pcap_seq_num[1] = seq_num_hex[1];
+
+            // Calculate the new sequence number, based on the pcap_data_played
+            pcap_seq_num_diff = (pcap_data_played + PCAP_SEQ_NUM_SHIFT);
+            pcap_data_played++;
+          }
+            
+          // Store the calculated sequence number into the PCAP data
+          buffer[10] = ((pcap_seq_num_diff & 0xff00) >> 8);
+          buffer[11] = pcap_seq_num_diff & 0x00ff;
+        
+          // Store the calculated timestamp into the PCAP data
+          buffer[12] = ((tstamp & 0xff000000) >> 24);
+          buffer[13] = ((tstamp & 0x00ff0000) >> 16);
+          buffer[14] = ((tstamp & 0x0000ff00) >> 8);
+          buffer[15] = ((tstamp & 0x000000ff));
+
+          // Recalc the partial checksum due to the changes on the Sequence Number
+          udp->uh_sum = 0 ;
+          pkt_index->partial_check = 
+                        check((u_int16_t *) &udp->uh_ulen, pkt_index->pktlen - 4) + 
+                        ntohs(IPPROTO_UDP + pkt_index->pktlen);
+        }
+
         // modify UDP ports
+        port_diff = ntohs (udp->uh_dport) - pkts->base;
         udp->uh_sport = htons(port_diff + *from_port);
         udp->uh_dport = htons(port_diff + *to_port);
 
@@ -248,6 +311,7 @@ int send_packets (play_args_t * play_arg
         memcpy (&last, &(pkt_index->ts), sizeof (struct timeval));
         pkt_index++;
     }
+    pcap_timestamp_shift += pcap_total_duration;    
 
     /* Closing the socket is handled by pthread_cleanup_push()/pthread_cleanup_pop() */
     pthread_cleanup_pop(1);
diff -rupN sipp_old/include/sipp.hpp sipp_new/include/sipp.hpp
--- sipp_old/include/sipp.hpp	2014-03-09 19:04:57.000000000 +0000
+++ sipp_new/include/sipp.hpp	2014-11-13 12:02:49.370306919 +0000
@@ -369,6 +369,8 @@ extern int           resynch_send
 extern int           resynch_recv                 _DEFVAL(0);
 extern unsigned long rtp_pckts                    _DEFVAL(0);
 extern unsigned long rtp_bytes                    _DEFVAL(0);
+extern unsigned long pcap_data_played             _DEFVAL(0);
+extern unsigned long pcap_timestamp_shift         _DEFVAL(0);
 extern unsigned long rtp_pckts_pcap               _DEFVAL(0);
 extern unsigned long rtp_bytes_pcap               _DEFVAL(0);
 extern unsigned long rtp2_pckts                   _DEFVAL(0);
